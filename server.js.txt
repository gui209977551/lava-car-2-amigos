const express = require("express");
const cors = require("cors");
const sqlite3 = require("sqlite3").verbose();
const jwt = require("jsonwebtoken");
const bcrypt = require("bcryptjs");

const app = express();
app.use(cors());
app.use(express.json());

const SECRET = process.env.JWT_SECRET || "segredo";

// Banco de dados SQLite
const db = new sqlite3.Database("./data.db", (err) => {
  if (err) console.error("Erro ao conectar no banco", err.message);
});

// Criação das tabelas
db.serialize(() => {
  db.run(`CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    email TEXT UNIQUE,
    password TEXT
  )`);

  db.run(`CREATE TABLE IF NOT EXISTS lavagens (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    tipo TEXT,
    valor REAL,
    pagamento TEXT,
    data DATETIME DEFAULT CURRENT_TIMESTAMP
  )`);

  // Usuário padrão
  const senhaHash = bcrypt.hashSync("admin123", 8);
  db.run(
    `INSERT OR IGNORE INTO users (email, password) VALUES (?, ?)`,
    ["admin@lavacar.local", senhaHash]
  );
});

// Middleware autenticação
function auth(req, res, next) {
  const token = req.headers["authorization"];
  if (!token) return res.status(403).send("Token necessário");

  jwt.verify(token.replace("Bearer ", ""), SECRET, (err, decoded) => {
    if (err) return res.status(401).send("Token inválido");
    req.userId = decoded.id;
    next();
  });
}

// Login
app.post("/login", (req, res) => {
  const { email, password } = req.body;
  db.get(`SELECT * FROM users WHERE email = ?`, [email], (err, user) => {
    if (!user) return res.status(400).send("Usuário não encontrado");
    const valid = bcrypt.compareSync(password, user.password);
    if (!valid) return res.status(401).send("Senha inválida");
    const token = jwt.sign({ id: user.id }, SECRET, { expiresIn: "1d" });
    res.json({ token });
  });
});

// Registrar lavagem
app.post("/lavagens", auth, (req, res) => {
  const { tipo, valor, pagamento } = req.body;
  db.run(
    `INSERT INTO lavagens (tipo, valor, pagamento) VALUES (?, ?, ?)`,
    [tipo, valor, pagamento],
    function (err) {
      if (err) return res.status(500).send("Erro ao salvar lavagem");
      res.json({ id: this.lastID, tipo, valor, pagamento });
    }
  );
});

// Listar lavagens
app.get("/lavagens", auth, (req, res) => {
  db.all(`SELECT * FROM lavagens ORDER BY data DESC`, [], (err, rows) => {
    if (err) return res.status(500).send("Erro ao buscar lavagens");
    res.json(rows);
  });
});

const PORT = process.env.PORT || 10000;
app.listen(PORT, () => console.log(`Backend rodando na porta ${PORT}`));
